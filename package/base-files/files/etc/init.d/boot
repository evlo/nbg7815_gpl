#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2011 OpenWrt.org

START=10
STOP=98

uci_apply_defaults() {
	. /lib/functions/system.sh

	cd /etc/uci-defaults || return 0
	files="$(ls)"
	[ -z "$files" ] && return 0
	mkdir -p /tmp/.uci
	for file in $files; do
		( . "./$(basename $file)" ) && rm -f "$file"
	done
	uci commit
}

boot() {
	## bootflag
	echo 1 > /tmp/bootflag

	[ -f /proc/mounts ] || /sbin/mount_root
	[ -f /proc/jffs2_bbc ] && echo "S" > /proc/jffs2_bbc
	[ -f /proc/net/vlan/config ] && vconfig set_name_type DEV_PLUS_VID_NO_PAD

	mkdir -p /var/run
	mkdir -p /var/log
	mkdir -p /var/lock
	mkdir -p /var/state
	mkdir -p /tmp/.uci
	chmod 0700 /tmp/.uci
	mkdir -p /tmp/.jail
	touch /var/log/wtmp
	touch /var/log/lastlog
	touch /tmp/resolv.conf.auto
	ln -sf /tmp/resolv.conf.auto /tmp/resolv.conf
	grep -q debugfs /proc/filesystems && /bin/mount -o noatime -t debugfs debugfs /sys/kernel/debug
	[ "$FAILSAFE" = "true" ] && touch /tmp/.failsafe

	/sbin/kmodloader

	#[fix] ASUS xg-c100c 10g network adapter cannot link with device
	ssdk_sh debug phy set 0 4 0xde1
	ssdk_sh debug phy set 1 4 0xde1
	ssdk_sh debug phy set 2 4 0xde1
	ssdk_sh debug phy set 3 4 0xde1
	/bin/switch_port lan reset

	# allow wifi modules time to settle
	sleep 1

	/sbin/wifi detect > /tmp/wireless.tmp
	[ -s /tmp/wireless.tmp ] && {
		cat /tmp/wireless.tmp >> /etc/config/wireless
	}
	rm -f /tmp/wireless.tmp

	/bin/board_detect
	uci_apply_defaults
	
	# temporary hack until configd exists
	/sbin/reload_config

	# create /dev/root if it doesn't exist
	[ -e /dev/root -o -h /dev/root ] || {
		rootdev=$(awk 'BEGIN { RS=" "; FS="="; } $1 == "root" { print $2 }' < /proc/cmdline)
		[ -n "$rootdev" ] && ln -s "$rootdev" /dev/root
	}

	/bin/system_init

	atsh > /tmp/atsh.info

	cat /proc/boot_info/rootfs/primaryboot > /tmp/zyxel_primaryboot
	cat /proc/boot_info/0:APPSBL/primaryboot > /tmp/zyxel_zld_primaryboot

		##########################################################
	# Mouting Application data files
	mkdir -p /tmp/ApplicationData/
	mount /dev/mmcblk0p11 /tmp/ApplicationData -t ext4 -o rw,noatime,commit=1

	local mountResult=$?

	# mkfs if needed.
	if [ "$mountResult" == "0" ]; then
		echo "Mounted Application data."
	else
		echo "Erasing Application data partition."
		mkfs.ext4 -m 0 /dev/mmcblk0p11
		echo "Mounting Application data."
		mount /dev/mmcblk0p11 /tmp/ApplicationData -t ext4 -o rw,noatime,commit=1
	fi
	
	##########################################################
	# Mouting Reserve data files
	mkdir -p /tmp/nbg
	mount /dev/mmcblk0p10 /tmp/nbg -t ext4 -o rw,noatime,commit=1
	
	mountResult=$?
	
	# mkfs if needed.
	if [ "$mountResult" == "0" ]; then
		echo "Mounted nbg data."
	else
		echo "Erasing nbg data partition."
		mkfs.ext4 -m 0 /dev/mmcblk0p10
		echo "Mounting nbg data."
		mount /dev/mmcblk0p10 /tmp/nbg -t ext4 -o rw,noatime,commit=1
	fi
}
