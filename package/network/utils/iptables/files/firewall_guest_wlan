#!/bin/sh
#Guest WLAN firewall check
# Guest WLAN 1 :192.168.141.x
# Guest WLAN 2 :192.168.142.x
# Guest WLAN 3 :192.168.143.x
# 1.Guest WLAN didn't open GUI from 192.168.1.1,192.168.141.1,
# 	192.168.142.1,192.168.143.1
# 2.192.168.1.x didn't ping Guest WLAN
#   Guest WLAN didn't ping 192.168.1.x
#   Guest WLAN 1 didn't ping Guest WLAN 2 and Guest WLAN 3.
#   Guest WLAN 2 didn't ping Guest WLAN 1 and Guest WLAN 3.
#   Guest WLAN 3 didn't ping Guest WLAN 1 and Guest WLAN 2.
#------------------------------------------------------------------
#   Guest WLAN 1 didn't ping 192.168.142.1 and 192.168.143.1.
#   Guest WLAN 2 didn't ping 192.168.141.1 and 192.168.143.1.
#   Guest WLAN 3 didn't ping 192.168.141.1 and 192.168.142.1.
#------------------------------------------------------------------
#   Guest WLAN didn't ping br-lan ip
#   Guest WLAN didn't log in br-lan FTP and SAMBA
#   Guest WLAN can't access LAN interface (www,telnet,https,ssh)
#   Guest WLAN can't access One connect APP
#------------------------------------------------------------------

. /lib/functions.sh
include /lib/config

iptables() {
	/usr/sbin/iptables -w "$@"
}

lock /tmp/.order_filter_guest.lock

LAN="br-lan"
guestLan="br-guest"
visitorLan="br-visitor"
target=`uci get firewall.general.target`
FTP_PORT=$(uci get proftpd.global.port)
lanip=$(ifconfig br-lan | grep "inet addr" | awk -F'addr:' '{print $2}' | awk -F'Bcast' '{print $1}')
netaddr_lanip=$(echo $lanip | cut -d '.' -f 1-3)
www_port=$(uci get firewall.remote_www.port)
https_port=$(uci get firewall.remote_https.port)
telnet_port=$(uci get firewall.remote_telnet.port)
ssh_port=$(uci get firewall.remote_ssh.port)
system_mode=$(uci_get system main system_mode)
op_role=$(uci get system.main.operation_role)

#Captive Portal for 3rd service AP
# This feature can only be enabled if it is WSQ60 or licensed WSQ50
# Start checking
visitor_network_feature=$(wifisys_tool -g 1 -f 2)
[ -z "$visitor_network_feature" ] && visitor_network_feature="0"
visitor_network_feature="2"
# End checking

if [ "$visitor_network_feature" == "2" ] && [ "$op_role" == "controller" ]; then
	/bin/zyxel_captive_portal reload
	iptables -t nat -D PREROUTING -i $visitorLan -j captive_routing
	iptables -t nat -A PREROUTING -i $visitorLan -j captive_routing
	iptables -D FORWARD -i $visitorLan -j captive_filter
	iptables -A FORWARD -i $visitorLan -j captive_filter
fi

iptables -F FORWARD_GuestLAN
iptables -D FORWARD -i $guestLan -j FORWARD_GuestLAN 2>/dev/null
iptables -D FORWARD -i $visitorLan -j FORWARD_GuestLAN 2>/dev/null
iptables -X FORWARD_GuestLAN
iptables -N FORWARD_GuestLAN

iptables -F INPUT_GuestLAN
iptables -D INPUT -i $guestLan -j INPUT_GuestLAN 2>/dev/null
iptables -D INPUT -i $visitorLan -j INPUT_GuestLAN 2>/dev/null
iptables -X INPUT_GuestLAN
iptables -N INPUT_GuestLAN

#iptables -D FORWARD -j FORWARD_GuestLAN 2>/dev/null
iptables -A FORWARD -i $guestLan -j FORWARD_GuestLAN 2>/dev/null
[ "$visitor_network_feature" == "2" ] && iptables -A FORWARD -i $visitorLan -j FORWARD_GuestLAN 2>/dev/null
#iptables -D INPUT -j INPUT_GuestLAN 2>/dev/null
iptables -A INPUT -i $guestLan -j INPUT_GuestLAN 2>/dev/null
[ "$visitor_network_feature" == "2" ] && iptables -A INPUT -i $visitorLan -j INPUT_GuestLAN 2>/dev/null

#for number in 1 2
#do
	chk_guest_lan=$(brctl show | grep $guestLan)
	chk_visitor_lan=$(brctl show | grep $visitorLan)
	guest_ipaddr=$(uci get network.guest.ipaddr)
	visitor_ipaddr=$(uci get network.visitor.ipaddr)
	ipmask=255.255.255.0
#	ipmask=$(uci get network.guest.netmask) # Currently we only support class C

#	iptables -D FORWARD_GuestLAN -i $guestLan -o $LAN -j DROP
#	iptables -D FORWARD_GuestLAN -s $netaddr.0/24 -d $netaddr.0/24 -j DROP
#	iptables -D FORWARD_GuestLAN -p udp -m multiport --dport 67,68 -j ACCEPT
#	iptables -D FORWARD_GuestLAN -p udp --dport 53 -j ACCEPT
#	iptables -D FORWARD_GuestLAN -p udp --sport 53 -j ACCEPT
	iptables -D FORWARD -i $guestLan -j ACCEPT
	iptables -D FORWARD -i $visitorLan -j ACCEPT
#	iptables -D INPUT_GuestLAN -i $guestLan -p icmp --icmp-type 8 -d $lanip -j DROP
#	iptables -D FTP_INPUT -i $guestLan -d $lanip -p tcp --dport $FTP_PORT -j DROP
#	iptables -D SAMBA_INPUT -i $guestLan -d $lanip -p udp --dport 137 -j DROP
#	iptables -D SAMBA_INPUT -i $guestLan -d $lanip -p udp --dport 138 -j DROP
#	iptables -D SAMBA_INPUT -i $guestLan -d $lanip -p tcp --dport 139 -j DROP
#	iptables -D SAMBA_INPUT -i $guestLan -d $lanip -p tcp --dport 445 -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -d $lanip -p udp --dport $www_port -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -d $lanip -p tcp --dport $www_port -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -d $lanip -p udp --dport $https_port -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -d $lanip -p tcp --dport $https_port -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -d $lanip -p udp --dport $telnet_port -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -d $lanip -p tcp --dport $telnet_port -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -d $lanip -p udp --dport $ssh_port -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -d $lanip -p tcp --dport $ssh_port -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -p udp --dport 263 -j DROP
#	iptables -D INPUT_GuestLAN -i $guestLan -p tcp --dport 263 -j DROP

	if [ -z "$chk_guest_lan" ];then
		ubus call network.interface.guest prepare

		guest_vid=$(uci_get wireless wifi guest_vid)
		base_addr=$(ifconfig ath1 | grep HWaddr | awk '{print $5}')
		ifconfig $guestLan hw ether $base_addr
	fi

	if [ "$visitor_network_feature" == "2" ] && [ -z "$chk_visitor_lan" ];then
		ubus call network.interface.visitor prepare

		base_addr=$(ifconfig ath4 | grep HWaddr | awk '{print $5}')
		ifconfig $visitorLan hw ether $base_addr
	fi
	
	if [ "$system_mode" == "1" ] ||
	[ "$system_mode" != "1" -a "$op_role" == "controller" ]; then
		ifconfig $guestLan $guest_ipaddr netmask $ipmask up
		[ "$visitor_network_feature" == "2" ] && ifconfig $visitorLan $visitor_ipaddr netmask $ipmask up
	else
		ifconfig $guestLan up
		[ "$visitor_network_feature" == "2" ] && ifconfig $visitorLan up

		guest_disabled=$(uci get wireless.ath1.disabled)
		if [ -z "$guest_disabled" ] || [ "$guest_disabled" == "0" ]; then
			guest_udhcpc_pid=$(ps | grep "udhcpc -i $guestLan" | grep -v "grep" | awk '{print $1}')
			[ -z "$guest_udhcpc_pid" ] && udhcpc -i $guestLan -s /usr/share/udhcpc/udhcpc_guest.sh -t 0 -q &
		fi

		visitor_disabled=$(uci get wireless.ath4.disabled)
		if [ "$visitor_network_feature" == "2" ]; then
			if [ -z "$visitor_disabled" ] || [ "$visitor_disabled" == "0" ]; then
				visitor_udhcpc_pid=$(ps | grep "udhcpc -i $visitorLan" | grep -v "grep" | awk '{print $1}')
				[ -z "$visitor_udhcpc_pid" ] && udhcpc -i $visitorLan -s /usr/share/udhcpc/udhcpc_guest.sh -t 0 -q &
			fi
		fi
	fi

	if [ "$target" == "DROP" ] ; then
		iptables -A FORWARD -i $guestLan -j ACCEPT
		[ "$visitor_network_feature" == "2" ] && iptables -A FORWARD -i $visitorLan -j ACCEPT
	fi

#	iptables -I FTP_INPUT -i $guestLan -d $lanip -p tcp --dport $FTP_PORT -j DROP
#	iptables -I SAMBA_INPUT -i $guestLan -d $lanip -p udp --dport 137 -j DROP
#	iptables -I SAMBA_INPUT -i $guestLan -d $lanip -p udp --dport 138 -j DROP
#	iptables -I SAMBA_INPUT -i $guestLan -d $lanip -p tcp --dport 139 -j DROP
#	iptables -I SAMBA_INPUT -i $guestLan -d $lanip -p tcp --dport 445 -j DROP
	iptables -I INPUT_GuestLAN -p icmp --icmp-type 8 -d $lanip -j DROP
	iptables -I INPUT_GuestLAN -d $lanip -p udp --dport $www_port -j DROP
	iptables -I INPUT_GuestLAN -d $lanip -p tcp --dport $www_port -j DROP
	iptables -I INPUT_GuestLAN -d $lanip -p udp --dport $https_port -j DROP
	iptables -I INPUT_GuestLAN -d $lanip -p tcp --dport $https_port -j DROP
	iptables -I INPUT_GuestLAN -d $lanip -p udp --dport $telnet_port -j DROP
	iptables -I INPUT_GuestLAN -d $lanip -p tcp --dport $telnet_port -j DROP
	iptables -I INPUT_GuestLAN -d $lanip -p udp --dport $ssh_port -j DROP
	iptables -I INPUT_GuestLAN -d $lanip -p tcp --dport $ssh_port -j DROP
	iptables -I INPUT_GuestLAN -p udp --dport 263 -j DROP
	iptables -I INPUT_GuestLAN -p tcp --dport 263 -j DROP

	if [ "$system_mode" == "1" ] ||
	[ "$system_mode" != "1" -a "$op_role" == "controller" ]; then
		iptables -I INPUT_GuestLAN -p udp -m multiport --dport 67,68 -j ACCEPT
		iptables -I INPUT_GuestLAN -p udp --dport 53 -j ACCEPT
		iptables -I INPUT_GuestLAN -p udp --sport 53 -j ACCEPT
	fi

	# In bridge mode, don't block guest traffic from br-guest1 to br-lan
	if [ "$system_mode" != "2" ] || [ "$op_role" != "controller" ]; then
		iptables -I FORWARD_GuestLAN -o $LAN -j DROP
	fi

	#iptables -I FORWARD_GuestLAN -p udp -m multiport --dport 67,68 -j ACCEPT
	#iptables -I FORWARD_GuestLAN -p udp --dport 53 -j ACCEPT
	#iptables -I FORWARD_GuestLAN -p udp --sport 53 -j ACCEPT
	iptables -A FORWARD_GuestLAN -d $netaddr_lanip.0/24 -j DROP

	iptables -A INPUT_GuestLAN -d $lanip -j DROP

	if [ "$op_role" == "controller" ]; then
		# move the following rules to udhcpc_guest.sh
		netaddr_guestip=$(echo $guest_ipaddr | cut -d '.' -f 1-3)
		netaddr_visitorip=$(echo $visitor_ipaddr | cut -d '.' -f 1-3)
		#iptables -A FORWARD_GuestLAN -d $netaddr_guestip.0/24 -j DROP
		#iptables -A FORWARD_GuestLAN -d $netaddr_visitorip.0/24 -j DROP
		iptables -A INPUT_GuestLAN -d $guest_ipaddr -j DROP
		[ "$visitor_network_feature" == "2" ] && iptables -A INPUT_GuestLAN -d $visitor_ipaddr -j DROP
		
		if [ "$visitor_network_feature" == "2" ] && [ "$system_mode" != "1" ]; then
			captive_http_port=$(uci get captiveportal.general.redirect_HTTP_port)
			captive_https_port=$(uci get captiveportal.general.redirect_HTTPS_port)
			iptables -I INPUT_GuestLAN -i $visitorLan -d $visitor_ipaddr -p tcp --dport 8008 -j ACCEPT 2> /dev/null
			iptables -I INPUT_GuestLAN -i $visitorLan -d $visitor_ipaddr -p tcp --dport $captive_http_port -j ACCEPT 2> /dev/null
			iptables -I INPUT_GuestLAN -i $visitorLan -d $visitor_ipaddr -p tcp --dport $captive_https_port -j ACCEPT 2> /dev/null
		fi
	fi

	if [ "$system_mode" == "2" ] && [ "$op_role" == "controller" ]; then
		guest_wlan_nat start
	fi
#done
lock -u /tmp/.order_filter_guest.lock
